// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayerManagement.Data;

#nullable disable

namespace PlayerManagement.Data.PlayerManagementMigrations
{
    [DbContext(typeof(PlayerManagementContext))]
    [Migration("20230815152455_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SL")
                .HasAnnotation("ProductVersion", "6.0.15");

            modelBuilder.Entity("PlayerManagement.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleMapsLink")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fields", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.FileContent", b =>
                {
                    b.Property<int>("FileContentId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.HasKey("FileContentId");

                    b.ToTable("FileContent", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("LeagueBudget")
                        .HasColumnType("REAL");

                    b.Property<string>("LeagueFoundation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Leagues", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.MatchSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatchDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("FieldId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("MatchSchedules", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerPositionId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerPositionId");

                    b.HasIndex("TeamId");

                    b.HasIndex("Email", "Phone")
                        .IsUnique();

                    b.ToTable("Players", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RedCards")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("YellowCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerMatchs", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerPhotos", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerPos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerPos")
                        .IsUnique();

                    b.ToTable("PlayerPositions", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerTeam", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeam", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerThumbnails", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayPosition", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerPositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "PlayerPositionId");

                    b.HasIndex("PlayerPositionId");

                    b.ToTable("Plays", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles", "SL");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UploadedFile");
                });

            modelBuilder.Entity("PlayerManagement.ViewModels.TeamStatsVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RedCards")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .HasColumnType("TEXT");

                    b.Property<int>("YellowCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TeamStatsVM", "SL");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerDocument", b =>
                {
                    b.HasBaseType("PlayerManagement.Models.UploadedFile");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("PlayerDocument");
                });

            modelBuilder.Entity("PlayerManagement.Models.TeamDocument", b =>
                {
                    b.HasBaseType("PlayerManagement.Models.UploadedFile");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("TeamDocument");
                });

            modelBuilder.Entity("PlayerManagement.Models.FileContent", b =>
                {
                    b.HasOne("PlayerManagement.Models.UploadedFile", "UploadedFile")
                        .WithOne("FileContent")
                        .HasForeignKey("PlayerManagement.Models.FileContent", "FileContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("PlayerManagement.Models.MatchSchedule", b =>
                {
                    b.HasOne("PlayerManagement.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Field");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.HasOne("PlayerManagement.Models.PlayerPosition", "PlayerPosition")
                        .WithMany("Players")
                        .HasForeignKey("PlayerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerPosition");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerMatch", b =>
                {
                    b.HasOne("PlayerManagement.Models.MatchSchedule", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerPhoto", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithOne("PlayerPhoto")
                        .HasForeignKey("PlayerManagement.Models.PlayerPhoto", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerTeam", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerThumbnail", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithOne("PlayerThumbnail")
                        .HasForeignKey("PlayerManagement.Models.PlayerThumbnail", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayPosition", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany("Plays")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.PlayerPosition", "PlayerPosition")
                        .WithMany("Plays")
                        .HasForeignKey("PlayerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerPosition");
                });

            modelBuilder.Entity("PlayerManagement.Models.Team", b =>
                {
                    b.HasOne("PlayerManagement.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerDocument", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany("PlayerDocuments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerManagement.Models.TeamDocument", b =>
                {
                    b.HasOne("PlayerManagement.Models.Team", "Team")
                        .WithMany("TeamDocuments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PlayerManagement.Models.League", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.Navigation("PlayerDocuments");

                    b.Navigation("PlayerPhoto");

                    b.Navigation("PlayerThumbnail");

                    b.Navigation("Plays");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerPosition", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Plays");
                });

            modelBuilder.Entity("PlayerManagement.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamDocuments");
                });

            modelBuilder.Entity("PlayerManagement.Models.UploadedFile", b =>
                {
                    b.Navigation("FileContent");
                });
#pragma warning restore 612, 618
        }
    }
}
